name: Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e .[test]

    - name: Prepare test data
      run: |
        cd tests
        python prepare_test_data.py
      continue-on-error: true  # Test data preparation might fail if example data not available

    - name: Run tests
      run: |
        pytest tests/ -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Run fast tests only (if full test suite fails)
      if: failure()
      run: |
        pytest tests/ -v --tb=short -m "not slow and not integration"
      env:
        PYTHONPATH: ${{ github.workspace }}

  test-with-coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies with coverage tools
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -e .[test]
        pip install coverage pytest-cov

    - name: Prepare test data
      run: |
        cd tests
        python prepare_test_data.py
      continue-on-error: true

    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=tensorqtl --cov-report=xml --cov-report=html
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-gpu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install CPU-only PyTorch for CI (no GPU available)
        pip install torch --index-url https://download.pytorch.org/whl/cpu
        pip install -e .
        pip install -e .[test]

    - name: Prepare test data
      run: |
        cd tests
        python prepare_test_data.py
      continue-on-error: true

    - name: Run GPU-related tests (CPU fallback)
      run: |
        pytest tests/ -v -m "not gpu_required" --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 tensorqtl --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 tensorqtl --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff tensorqtl tests
      continue-on-error: true

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff tensorqtl tests
      continue-on-error: true